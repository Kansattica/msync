name: CMake

on: [push, pull_request]


jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    env:
      BUILD_TYPE: Release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            compiler: gcc-9
            cxx_compiler: g++-9
            arch: x64
            apt: libcurl4-openssl-dev
          - os: ubuntu-latest
            compiler: clang-8
            cxx_compiler: clang++-8
            arch: x64
            apt: libcurl4-openssl-dev
          - os: ubuntu-latest
            compiler: gcc-9
            cxx_compiler: g++-9
            arch: i386
            cflags: -m32
            apt: gcc-9-multilib g++-9-multilib libcurl4-openssl-dev:i386 linux-libc-dev:i386
          - os: ubuntu-latest
            compiler: gcc-9
            cxx_compiler: g++-9
            arch: x64
            configure_args: -DMSYNC_USER_CONFIG=ON -DMSYNC_FILE_LOG=OFF
            make_deb: true
            apt: libcurl4-openssl-dev
          - os: macos-latest
          - os: macos-latest
            configure_args: -DMSYNC_USER_CONFIG=ON -DMSYNC_FILE_LOG=OFF
          - os: macos-latest
            use_boost: true
            deployment_target: '10.14'
          - os: macos-latest
            configure_args: -DMSYNC_USER_CONFIG=ON -DMSYNC_FILE_LOG=OFF
            use_boost: true
            deployment_target: '10.14'
          - os: windows-latest
            configure_args: -A x64
          - os: windows-latest
            configure_args: -A Win32
          - os: windows-latest
            configure_args: -DMSYNC_USER_CONFIG=ON -DMSYNC_FILE_LOG=OFF -A x64
          - os: windows-latest
            configure_args: -DMSYNC_USER_CONFIG=ON -DMSYNC_FILE_LOG=OFF -A Win32

    steps:
    - uses: actions/checkout@v2
  
    - name: Enable cross-compilation if needed
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'i386'
      run: sudo dpkg --add-architecture i386 && sudo apt update

    - name: Install OSX dependencies
      if: matrix.os == 'macos-latest' && matrix.use_boost
      run: brew install boost

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-fast install -y ${{ matrix.apt }}
      
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${{ matrix.configure_args }}
      env:
        CC: ${{ matrix.compiler }}
        CXX: ${{ matrix.cxx_compiler }}
        CFLAGS: ${{ matrix.cflags }}
        CXXFLAGS: ${{ matrix.cflags }}
        CMAKE_OSX_DEPLOYMENT_TARGET: ${{ matrix.deployment_target }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE --parallel 2
    
    - name: Smoke Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        ls
        if [ "${{ matrix.os }}" == "windows-latest" ]; then EXELOCATION=./$BUILD_TYPE/msync.exe; else EXELOCATION=./msync; fi
        $EXELOCATION
        $EXELOCATION version
        $EXELOCATION yeehaw

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE --output-on-failure --schedule-random -j 2
      
