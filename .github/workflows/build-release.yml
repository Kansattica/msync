name: CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            compiler: gcc
            env: BUILD_ARCH=x64 CC=gcc-8 CXX=g++-8 
            apt: g++-8 libstdc++-8-dev libcurl4-openssl-dev
          - os: ubuntu-latest
            compiler: clang
            env: BUILD_ARCH=x64 CC="/usr/bin/clang-7" CXX="/usr/bin/clang++-7"
            apt: clang-7 llvm-7-dev libstdc++-8-dev libcurl4-openssl-dev
          - os: ubuntu-latest
            compiler: gcc
            env: CXXFLAGS="-m32" CFLAGS="-m32" BUILD_ARCH=i386 CC=gcc-8 CXX=g++-8
            apt: g++-8 gcc-8-multilib g++-8-multilib libstdc++-8-dev-i386-cross libcurl4-openssl-dev:i386 linux-libc-dev:i386 libstdc++-8-dev
          - os: macos-latest
          - os: windows-latest
            env: CMAKE_GENERATOR="Visual Studio 15 2017" CMAKE_GENERATOR_PLATFORM=x64
          - os: windows-latest
            env: CMAKE_GENERATOR="Visual Studio 15 2017" CMAKE_GENERATOR_PLATFORM=win32
          - os: macos-latest
            env: CONFIGURE_ARGUMENTS="-DMSYNC_USER_CONFIG=ON -DMSYNC_FILE_LOG=OFF"
          - os: windows-latest
            env: CMAKE_GENERATOR="Visual Studio 15 2017" CMAKE_GENERATOR_PLATFORM=x64
            configure_args: -DMSYNC_USER_CONFIG=ON -DMSYNC_FILE_LOG=OFF
          - os: windows-latest
            env: CMAKE_GENERATOR="Visual Studio 15 2017" CMAKE_GENERATOR_PLATFORM=win32
            configure_args: -DMSYNC_USER_CONFIG=ON -DMSYNC_FILE_LOG=OFF
          - os: ubuntu-latest
            compiler: gcc
            env: BUILD_ARCH=x64
            configure_args: -DMSYNC_USER_CONFIG=ON -DMSYNC_FILE_LOG=OFF
            make_deb: true
            apt: g++-8 libstdc++-8-dev libcurl4-openssl-dev

    steps:
    - uses: actions/checkout@v2
  
    - name: Enable cross-compilation if needed
      if: matrix.os == 'ubuntu-latest'
      run: if [ "$BUILD_ARCH" = "i386" ]; then sudo dpkg --add-architecture i386 && sudo apt update; fi

    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt install -y ${{ matrix.apt }}
      
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${{ matrix.configure_args }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE --parallel

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
