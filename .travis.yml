language: cpp
env:
  - BUILDTYPE=Release BUILD_ARCH=x64
  #- BUILDTYPE=MinSizeRel
os: linux
dist: bionic
compiler:
  - gcc
  - clang
matrix:
  include:
  - os: osx
    osx_image: 10.2 # the default takes forever to update homebrew
    compiler: clang
    env: BUILDTYPE=Release LDFLAGS="-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib" CPPFLAGS="-I/usr/local/opt/llvm/include" PATH="/usr/local/opt/llvm/bin:$PATH" 
  - os: linux
    dist: bionic
    compiler: gcc
    env: BUILDTYPE=Release CXXFLAGS="-m32" CFLAGS="-m32" BUILD_ARCH=i386
  - os: windows
    compiler: cl.exe
    env: BUILDTYPE=Release CMAKE_GENERATOR="Visual Studio 15 2017" CMAKE_GENERATOR_PLATFORM=x64
  - os: windows
    compiler: cl.exe
    env: BUILDTYPE=Release CMAKE_GENERATOR="Visual Studio 15 2017" CMAKE_GENERATOR_PLATFORM=win32

# llvm is needed because it provides an updated version of charconv needed to run the tests
# the update is because the llvm compiler produces code that runs fast enough to finish in time
# and the updated one runs faster still
addons:
  homebrew:
    packages:
      - llvm
    update: true

before_install:
  - if [ "$TRAVIS_COMPILER" = "gcc" ] && [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo -E apt-get -yqq --no-install-suggests --no-install-recommends install g++-8 && CC=gcc-8 && CXX=g++-8; fi
  - if [ "$TRAVIS_COMPILER" = "clang" ] && [ "$TRAVIS_OS_NAME" = "linux" ] ; then sudo -E apt-get -yqq --no-install-suggests --no-install-recommends install clang-7 llvm-7-dev && CC="/usr/bin/clang-7" && CXX="/usr/bin/clang++-7"; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo -E apt -yqq install --fix-missing libstdc++-8-dev; fi
  - if [ "$BUILD_ARCH" = "i386" ]; then sudo -E apt -yqq install --fix-missing gcc-8-multilib g++-8-multilib libstdc++-8-dev-i386-cross libcurl4-openssl-dev:i386 linux-libc-dev:i386; fi

script:
  - mkdir build
  - cd build
  - cmake --version
  - cmake -DCMAKE_BUILD_TYPE=$BUILDTYPE .. 
  - cmake --build . --config $BUILDTYPE --parallel 2
  - if [ "$TRAVIS_OS_NAME" = "windows" ]; then EXELOCATION="./$BUILDTYPE/msync.exe"; else EXELOCATION="./msync"; fi
  - if [ "$TRAVIS_OS_NAME" = "windows" ]; then TESTLOCATION="./tests/$BUILDTYPE/tests.exe"; else TESTLOCATION="./tests/tests"; fi
  - if [ "$TRAVIS_OS_NAME" = "windows" ]; then NETTESTLOCATION="./tests/$BUILDTYPE/net_tests.exe"; else NETTESTLOCATION="./tests/net_tests"; fi
  - $EXELOCATION version
  - $EXELOCATION yeehaw
  - $NETTESTLOCATION
  - $TESTLOCATION ~[long_run]
  - $TESTLOCATION [long_run_outgoingpost]
  - $TESTLOCATION [long_run_parseopts]

after_success:
  - echo "Binary size:"
  - du -h $EXELOCATION
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then FINISHED_BINARY_NAME="msync-$TRAVIS_TAG-linux-$BUILD_ARCH-$TRAVIS_COMPILER"; fi
  - if [ "$TRAVIS_OS_NAME" = "windows" ]; then FINISHED_BINARY_NAME="msync-$TRAVIS_TAG-windows-$CMAKE_GENERATOR_PLATFORM.exe"; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then FINISHED_BINARY_NAME="msync-$TRAVIS_TAG-osx-x64"; fi
  - echo $FINISHED_BINARY_NAME
  - mv $EXELOCATION $FINISHED_BINARY_NAME

deploy:
  provider: releases
  skip_cleanup: true
  draft: true
  file: $FINISHED_BINARY_NAME
  api_key: $API_KEY
  on:
    tags: true
